{
  "name": "bvg",
  "version": "0.1.11",
  "keywords": [
    "BVG.js",
    "bindable vector graphcs",
    "SVG",
    "observe",
    "Graphics",
    "Object.observe"
  ],
  "description": "Bindable Vector Graphics provides real-time data-driven visualisation for the web.",
  "homepage": "https://github.com/Spaxe/BVG.js",
  "bugs": {
    "url": "https://github.com/Spaxe/BVG.js/issues",
    "email": "contact@xavierho.com"
  },
  "license": "MIT",
  "author": {
    "name": "Xavier Ho",
    "email": "contact@xavierho.com",
    "url": "http://jumptoglide.com"
  },
  "files": [
    "bvg.js"
  ],
  "main": "bvg",
  "repository": {
    "type": "git",
    "url": "https://github.com/Spaxe/BVG.js"
  },
  "dependencies": {
    "amdefine": ">=0.1.0",
    "requirejs": ">=2.1.16"
  },
  "devDependencies": {
    "chai": "^2.1.2",
    "mocha": "^2.2.1",
    "mocha-phantomjs": "^3.5.3",
    "phantomjs": "^1.9.16"
  },
  "readme": "# BVG - Bindable Vector Graphics\n**Real-time data-driven visualisation for the web.**\n\n![Example](https://raw.githubusercontent.com/Spaxe/BVG.js/master/demo/index.gif)\n\nLive example: http://spaxe.github.io/BVG.js/\n\n*Bindable Vector Graphics* was born out of frustration for lack of a\nmiddle level SVG library. [D3.js](http://d3js.org/) abstracts too much\nlogic, and [SVG.js](http://svgjs.com/) provides only low-level SVG drawing.\nBindable Vector Graphics offers SVG elements that change as the data change,\nand gives you tools to control their look.\n  \n\nThe heart of this library is a trinity: **SVG + Data + Binding**. This\nconnects your data to the SVG element through the binding function, which\ncreates a living connection that can react to change. BVG uses\n[`Object.observe()`](http://caniuse.com/#feat=object-observe) which is\navailable on Chrome 36+, Opera 27+ and Android Browser 37+.\n\nIf you wish to use this for older browsers, you can polyfill with\n[`MaxArt2501/Object.observe`](https://github.com/MaxArt2501/object-observe).\n\n## Installation\n\n**Install using `npm`**:\n\n 1. Install Node.js: https://docs.npmjs.com/getting-started/installing-node\n 2. In your working directory:\n\n    ```\n    npm install bvg\n    ```\n\n**Install via GitHub**:\n\n 1. Clone this repo:\n\n    ```\n    git clone https://github.com/Spaxe/BVG.js.git\n    ```\n\n 2. Copy `require.js` and `bvg.js` into your working directory.\n\n**To include `BVG.js` in your webpage**:\n\n 1. In your HTML `<head>`, include this script using `require.js`:\n\n    ```HTML\n    <script src=\"path/to/require.js\" data-main=\"your-script.js\"></script>\n    ```\n\n 2. In `your-script.js`, define your own code with\n\n    ```Javascript\n    require(['path/to/bvg.js'], function (BVG) {\n      // your code goes here ...\n    });\n    ```\n\n## Quickstart\n\n![Quickstart Example](https://raw.githubusercontent.com/Spaxe/BVG.js/master/demo/001-hello.gif)\n\nHTML:\n\n```HTML\n<div id=\"bvg-container\"></div>\n```\n\nCSS (Make the container large enough):\n\n```CSS\nhtml, body, #bvg-container {\n  height: 100%;\n  margin: 0;\n}\n```\n\nJavascript:\n\n```Javascript\n// Create a BVG container based on selected HTML element\nvar bvg = BVG.create('#bvg-container');\n// Create a Bindable circle, colour it orange\nvar circle = bvg.ellipse(0, 0, 150, 150)\n                .fill(220, 64, 12);\n// Change its size based on mouse movement\nbvg.tag().addEventListener('mousemove', function (event) {\n  circle.data({\n    rx: event.clientX,\n    ry: event.clientY\n  });\n});\n```\n    \n\n## The BVG Container\nThe rest of the documentation will assume `bvg` as our BVG container\ncreated by the example below.\n    \n\n### `BVG.create(htmlElement)`\nCreate a BVG container inside `htmlElement`.\n\nReturn the BVG container object.\n\n - `htmlElement`  : Either a [CSS Selector](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n                    or any [HTMLElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement).\n\n```Javascript\n// Create a new BVG container and append it to an existing HTML element.\nvar bvg = BVG.create('#bvg-container');\n```\n    \n\n## BVG Elements\nAll BVG objects, including the container, have access to drawing functions\nand return reference to the new shape, which is also a BVG.\n\n```Javascript\n// Create a rectangle at (0, 0) with dimensions 100x100 px and add it to bvg\nvar rect = bvg.rect(0, 0, 100, 100);\n```\n\nThe BVG module also has drawing functions, which return the BVG object:\n\n```Javascript\n// Create a rectangle at (0, 0) with dimensions 100x100 px\n// Note it uses the BVG module directly to create the rectangle.\nvar rect = BVG.rect(0, 0, 100, 100);\n// Add the rectangle to an existing BVG container\nbvg.append(rect);\n```\n\nDrawing functions can be called in a number of ways. Take `bvg.rect(x, y, width, height)`\nas an example below. Sometimes it is easier to use one over another style.\n\n```Javascript\nbvg.rect(0, 10, 30, 70);      // Arguments style\nbvg.rect({                    // Object style\n  x: 0,\n  y: 10,                      // Name of the object properties must match\n  width: 30,                  // names of the arguments in the functions,\n  height: 70                  // but the order can be any.\n});\n```\n    \n\n### `bvg.rect(x, y, width, height)`\nCreate a rectangle at position `(x, y)` at `width` x `height` in size.\n\n```Javascript\nvar rect = bvg.rect(100, 100, 300, 150);\n```\n      \n\n### `bvg.circle(cx, cy, r)`\nCreate a circle centred on `(cx, cy)` with radius `r`.\n\n```Javascript\nvar circle = bvg.ellipse(100, 100, 50);\n```\n      \n\n### `bvg.ellipse(cx, cy, rx, ry)`\nCreate a ellipse centred on `(cx, cy)` with radii `rx` and `ry`.\n\n```Javascript\nvar ellipse = bvg.ellipse(100, 100, 200, 180);\n```\n      \n\n### `bvg.line(x1, y1, x2, y2)`\nCreate a line from `(x1, y1)` to `(x2, y2)`.\n\n```Javascript\nvar line = bvg.line(100, 100, 200, 300);\n```\n      \n\n### `bvg.polyline([[x1, y1], [x2, y2], ...])`\nCreate a series of lines from point to point.\n\n```Javascript\nvar polyline = bvg.polyline([[100, 200], [200, 300], [400, 800]]);\n```\n      \n\n### `bvg.polygon([[x1, y1], [x2, y2], ...])`\nCreate a closed polygon from point to point. The last point will be\nconnected back to the first point.\n\n```Javascript\nvar polygon = bvg.polygon([[100, 200], [200, 300], [400, 800]]);\n```\n      \n\n## Grouping Elements\n### `bvg.group([transform])`\n\nCreate a group to contain BVG objects. It acts like a BVG container with\nan optional `transform` attribute.\n\n```Javascript\n// Create a new group and fill it with dashes.\nvar dashes = bvg.group();\nfor (int i = 0; i < 5; i++) {\n  dahses.rect(10, 10 + i * 30, 50, 20);\n}\n```\n      \n\n## Hyperlinks\n### `bvg.hyperlink(url)`\n\nCreate a hyperlink BVG to target URL `url`. It does not have any display\nelements. Make sure to append elements to it.\n\n```Javascript\n// Clicking on this element will bring them to the Github page\nvar githubLink = bvg.hyperlink('https://github.com/spaxe/BVG.js');\n// Make a button and attack it to the link\ngithubLink.ellipse(200, 200, 50, 50);\n```\n      \n\n## Other Geometry\n### `bvg.triangle(cx, cy, r)`\nCreate a regular triangle centred on `(cx, cy)` with vertices `r` distance\naway.\n\n```Javascript\nvar triangle = bvg.triangle(50, 50, 10);\n```\n      \n\n### `bvg.arc(cx, cy, rx, ry, startAngle, endAngle)`\nCreate an arc centred on `(cx, cy)` with radius `rx` and `ry`, starting\nfrom `startAngle` anti-clockwise to `endAngle`, where 0 is the positive\nx-axis.\n\n```Javascript\nvar arc = bvg.arc(50, 50, 50, 100, 0, Math.PI);\n```\n      \n\n### `bvg.text(text, x, y)`\nCreate a string of `text` text at location `(x, y)`.\n\n```Javascript\nvar text = bvg.text('Mrraa!', 20, 10);\n```\n      \n\n## The BVG Object\nBVGs are SVGs with extra superpowers.\n    \n\n### `bvg.append(bvg)`\nInsert `child_bvg` inside `bvg`. This is useful to add elements inside a\n`BVG.group()`.\n    \n\n### `bvg.remove()`\nRemove itself from its parent. Return self reference.\n    \n\n### `bvg.parent()`\nReturn the parent BVG. If there is no parent (such is the case for the BVG\ncontainer itself), return null.\n    \n\n### `bvg.children()`\nReturn a list of BVG elements inside `bvg`.\n    \n\n### `bvg.tag()`\nReturn thw BVG graphical content, a SVG.\n    \n\n### `bvg.data()`\nGet/set the `data` object in a BVG. There are four ways to use this\nfunction.\n\n - `bvg.data()`: Return `data` bound to the BVG.\n - `bvg.data(newData)`: Update `data` with `newData` object.\n - `bvg.data(property)`: Return `data[property]` from the BVG.\n - `bvg.data(property, newValue)`: Update `property` with `newValue`.\n\nReturn `bvg` object reference.\n    \n\n### `bvg.attr()`\nGet/set attributes on a BVG.\n\n - `bvg.attr(attr)`: Return attribute value.\n - `bvg.attr(attr, value)`: Update `attr` with `value`.\n    \n\n### `bvg.fill()`\nGet/set the filling colour. There are four ways to use this function.\n\n - `bvg.fill()`: Return `fill` colour as [r, g, b, a].\n - `bvg.fill(hex)`: Set `fill` colour with a CSS hex string.\n - `bvg.fill(rgb)`: Set `fill` with a greyscale colour with equal\n   values `(rgb, rgb, rgb)`.\n - `bvg.fill(r, g, b, [a])`: Set `fill` with `(r, g, b, a)`. If `a`\n   is omitted, it defaults to `1`.\n\n`r`, `g`, `b` should be in the range of 0-255 inclusive.\n    \n\n### `bvg.noFill()`\nRemove BVG object's colour filling completely.\n    \n\n### `bvg.stroke()`\nGet/set the outline colour. There are four ways to use this function.\n\n - `bvg.stroke()`: Return `stroke` colour as [r, g, b, a].\n - `bvg.stroke(hex)`: Set `stroke` colour with a CSS hex string.\n - `bvg.stroke(rgb)`: Set `stroke` with a greyscale colour with equal\n   values `(rgb, rgb, rgb)`.\n - `bvg.stroke(r, g, b, [a])`: Set `stroke` with `(r, g, b, a)`. If `a`\n   is omitted, it defaults to `1`.\n\n`r`, `g`, `b` should be in the range of 0-255 inclusive.\n    \n\n### `bvg.strokeWidth([width])`\nGet/set the outline thickness.\n\nReturns the current outline thickness if `width` is omitted. Otherise,\nit assigns the outline thickness with a new value, and returns the `bvg`\nobject reference.\n\n - `width`  : Outline thickness in pixels.\n    \n\n### `bvg.noStroke()`\nRemove BVG object's outline completely.\n    \n\n### `bvg.addClass(c)`\nAdd a class name to the element.\n  \n\n### `bvg.removeClass(c)`\nRemove a class name to the element.\n    \n\n### `bvg.hasClass(c)`\nReturn true if the element has class `c`.\n    \n\n### `bvg.removeClass(c)`\nAdd or remove the class `c` to the element.\n    \n\n## Utility Methods \n\n### `BVG.rgba()`\nConverts a hex string or colour value to rgba(r, g, b, a).\n\nReturns `[r, g, b, a]`.\n\nPossible ways to use this function are:\n\n - `BVG.rgba(hex, [css])`\n - `BVG.rgba(rgb, [css])`\n - `BVG.rgba(r, g, b, [css])`\n - `BVG.rgba(r, g, b, a, [css])`\n\n`hex` is a CSS colour string between `#000000` and `#FFFFFF`.\n\n`r`, `g`, `b` are in the range of 0-255 inclusive. `a` is the opacity and\nis in the range of 0.0-1.0. If not specified, `a` will be `1`.\n\nif `css` is `true`, it returns a string `'rgba(r, g, b, a)'` instead.\n    \n\n## Contribute to this library\n[Make a pull request](https://github.com/Spaxe/BVG.js/pulls) or\n[post an issue](https://github.com/Spaxe/BVG.js/issues). Say hello to\ncontact@xaiverho.com.\n  \n\n",
  "readmeFilename": "README.md",
  "gitHead": "3f2a30a1938ff91cd97c05a17642411cd2e11245",
  "_id": "bvg@0.1.11",
  "scripts": {},
  "_shasum": "38d6f1c7d3c681af273ada5a17c837dc16b6688d",
  "_from": "bvg@0.1.11"
}
